/**
	@file bank.cpp
	@brief Top level bank implementation file
 */
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>
#include <string.h>
#include <vector>
#include <utility>
#include <string>

//=================================================================================================//

//=================================================================================================//	

class Account {
public:
	//Constructor
	Account(const std::string& owner, const int& balance) { _owner_ = owner; _balance_ = balance; }

	//Accessors
	bool verify_account(const std::string& name) const { return name == _owner_; } 
	Account* get_account(const std::string& name) { return this; }
	const int& get_balance() const { return _balance_; }

	//Modifiers
	std::pair<bool, int> deposit_funds(const int& amount);
	std::pair<bool, int> withdraw_funds(const int& amount);
	std::pair<bool, int> transfer_funds(const int& amount, Account* target_account);

private:
	//Variables
	std::string _owner_;
	int _balance_;

	//Helper Functions
	void set_balance(const int& value) { _balance_ = value; }
};

std::pair<bool, int> Account::deposit_funds(const int& amount) {
	// An attempt at depositing a negative value
	if(amount < 0) {
		std::pair<bool, int> tmp = std::make_pair(false, _balance_);
		return tmp;
	}

	int balance = _balance_;
	balance += amount;

	// Returns false if the value of the account rolls over.
	// Addition of two positive integers should never be less than
	// the original value.
	if(_balance_ > balance) {
		std::pair<bool, int> tmp = std::make_pair(false, _balance_);
		return tmp;
	}

	_balance_ = balance;
	std::pair<bool, int> tmp = std::make_pair(true, _balance_);
	return tmp;
}

std::pair<bool, int> Account::withdraw_funds(const int& amount) {
	// An attempt at withdrawing a negative value
	if(amount < 0) {
		std::pair<bool, int> tmp = std::make_pair(false, _balance_);
		return tmp;
	}

	int balance = _balance_;
	balance += amount;

	// Returns false if the value of the account rolls over.
	// Subtraction of two positive integers should never be more than
	// the original value.
	if(_balance_ < balance) {
		std::pair<bool, int> tmp = std::make_pair(false, _balance_);
		return tmp;
	}

	_balance_ = balance;
	std::pair<bool, int> tmp = std::make_pair(true, _balance_);
	return tmp;
}

std::pair<bool, int> Account::transfer_funds(const int& amount, Account* target_account) {
	// Check for self assignment
	if(this == target_account) {
		std::pair<bool, int> tmp = std::make_pair(false, _balance_);
		return tmp;
	}

	// Verify transfer amount is a positive value
	if(amount < 0) {
		std::pair<bool, int> tmp = std::make_pair(false, _balance_);
		return tmp;
	}

	// Transfer funds
	int self_balance = _balance_;
	int tgt_balance = target_account->get_balance();
	self_balance -= amount;
	tgt_balance += amount;

	// Returns false if the value of either account rolls over.
	if(self_balance > _balance_ || tgt_balance < target_account->get_balance()) {
		std::pair<bool, int> tmp = std::make_pair(false, _balance_);
		return tmp;
	}

	// Otherwise, complete transfer
	_balance_ = self_balance;
	target_account->set_balance(tgt_balance);
	std::pair<bool, int> tmp = std::make_pair(true, _balance_);
	return tmp;
}

//=================================================================================================//

//=================================================================================================//

void* client_thread(void* arg);
void* console_thread(void* arg);

int main(int argc, char* argv[])
{
	if(argc != 2)
	{
		printf("Usage: bank listen-port\n");
		return -1;
	}

	unsigned short ourport = atoi(argv[1]);

	// Initialize bank accounts
	std::vector<Account> Bank_Accounts;
	Bank_Accounts.push_back(Account("Alice", 100));
	Bank_Accounts.push_back(Account("Bob", 50));
	Bank_Accounts.push_back(Account("Eve", 0));

	//socket setup
	int lsock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	if(!lsock)
	{
		printf("fail to create socket\n");
		return -1;
	}

	//listening address
	sockaddr_in addr_l;
	addr_l.sin_family = AF_INET;
	addr_l.sin_port = htons(ourport);
	unsigned char* ipaddr = reinterpret_cast<unsigned char*>(&addr_l.sin_addr);
	ipaddr[0] = 127;
	ipaddr[1] = 0;
	ipaddr[2] = 0;
	ipaddr[3] = 1;
	if(0 != bind(lsock, reinterpret_cast<sockaddr*>(&addr_l), sizeof(addr_l)))
	{
		printf("failed to bind socket\n");
		return -1;
	}
	if(0 != listen(lsock, SOMAXCONN))
	{
		printf("failed to listen on socket\n");
		return -1;
	}

	pthread_t cthread;
	pthread_create(&cthread, NULL, console_thread, NULL);

	//loop forever accepting new connections
	while(1)
	{
		sockaddr_in unused;
		socklen_t size = sizeof(unused);
		int csock = accept(lsock, reinterpret_cast<sockaddr*>(&unused), &size);
		if(csock < 0)	//bad client, skip it
			continue;

		pthread_t thread;
		pthread_create(&thread, NULL, client_thread, (void*)csock);
	}
}

void* client_thread(void* arg)
{
	int csock = (int)arg;

	printf("[bank] client ID #%d connected\n", csock);

	//input loop
	int length;
	char packet[1024];
	while(1)
	{
		//read the packet from the ATM
		if(sizeof(int) != recv(csock, &length, sizeof(int), 0))
			break;
		if(length >= 1024 || length <= 0) // Updated if statement requirements
		{
			printf("invalid packet length\n");
			break;
		}
		if(length != recv(csock, packet, length, 0))
		{
			printf("[bank] fail to read packet\n");
			break;
		}

		//TODO: process packet data

		//TODO: put new data in packet

		//send the new packet back to the client
		if(sizeof(int) != send(csock, &length, sizeof(int), 0))
		{
			printf("[bank] fail to send packet length\n");
			break;
		}
		if(length != send(csock, (void*)packet, length, 0))
		{
			printf("[bank] fail to send packet\n");
			break;
		}

	}

	printf("[bank] client ID #%d disconnected\n", csock);

	close(csock);
	return NULL;
}

void* console_thread(void* arg)
{
	char buf[80];
	while(1)
	{
		printf("bank> ");
		fgets(buf, 79, stdin);
		buf[strlen(buf)-1] = '\0';	//trim off trailing newline

		//TODO: your input parsing code has to go here
	}
}
